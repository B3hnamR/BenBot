*** Begin Patch
*** Update File: app/services/crypto_payment_service.py
@@
-        track_id = (order.invoice_payload or "").strip()
-        if not track_id:
-            return CryptoSyncResult(
+        track_id = (order.invoice_payload or "").strip()
+        log = self._log.bind(order_id=order.public_id, track_id=track_id or None)
+        if not track_id:
+            log.debug("crypto_invoice_sync_skipped", reason="missing_track_id")
+            return CryptoSyncResult(
                 updated=False,
                 status=None,
                 order_status=order.status,
                 pay_link=self._current_pay_link(order),
                 expires_at=order.payment_expires_at,
             )
 
         if not self._settings.oxapay_api_key:
-            return CryptoSyncResult(
+            log.warning("crypto_invoice_sync_skipped", reason="missing_api_key")
+            return CryptoSyncResult(
                 updated=False,
                 status=None,
                 order_status=order.status,
                 pay_link=self._current_pay_link(order),
                 expires_at=order.payment_expires_at,
                 error="OxaPay API key is not configured.",
             )
 
         try:
             client = self._get_client()
         except ValueError as exc:
+            log.error("crypto_invoice_sync_client_error", error=str(exc))
             return CryptoSyncResult(
                 updated=False,
                 status=None,
                 order_status=order.status,
                 pay_link=self._current_pay_link(order),
@@
-        try:
-            payment: OxapayPayment = await client.get_payment(track_id)
-        except OxapayError as exc:
-            return CryptoSyncResult(
+        try:
+            payment: OxapayPayment = await client.get_payment(track_id)
+        except OxapayError as exc:
+            log.warning(
+                "crypto_invoice_sync_error",
+                error=str(exc),
+                status=exc.status_code,
+                response=exc.payload,
+            )
+            return CryptoSyncResult(
                 updated=False,
                 status=None,
                 order_status=order.status,
                 pay_link=self._current_pay_link(order),
                 expires_at=order.payment_expires_at,
                 error=str(exc),
             )
+        except Exception as exc:  # noqa: BLE001
+            log.exception("crypto_invoice_sync_exception", error=str(exc))
+            return CryptoSyncResult(
+                updated=False,
+                status=None,
+                order_status=order.status,
+                pay_link=self._current_pay_link(order),
+                expires_at=order.payment_expires_at,
+                error=str(exc),
+            )
 
         pay_link = (
             payment.data.get("pay_link")
             or payment.data.get("payment_url")
             or payment.data.get("link")
             or self._current_pay_link(order)
         )
         new_status = self._map_oxapay_status(payment.status)
         updated = new_status != order.status
         if new_status == OrderStatus.PAID:
             charge_id = self._extract_charge_id(payment)
             await self._orders.mark_paid(order, charge_id=charge_id or track_id, paid_at=datetime.now(tz=timezone.utc))
+            log.info("crypto_invoice_sync_paid", charge_id=charge_id or track_id)
         elif new_status == OrderStatus.EXPIRED:
             await self._orders.set_status(order, OrderStatus.EXPIRED)
             pay_link = None
+            log.info("crypto_invoice_sync_expired")
         elif new_status == OrderStatus.CANCELLED:
             await self._orders.set_status(order, OrderStatus.CANCELLED)
             pay_link = None
+            log.info("crypto_invoice_sync_cancelled")
         else:
             # Keep awaiting payment but update expiry timestamp.
             if payment.expired_at:
                 order.payment_expires_at = payment.expired_at
+            log.debug("crypto_invoice_sync_waiting", status=payment.status)
 
         if order.status != OrderStatus.AWAITING_PAYMENT:
             pay_link = None
+            log.debug("crypto_invoice_sync_link_cleared", status=order.status.value)
 
         await self._orders.merge_extra_attrs(
             order,
             {
                 OXAPAY_EXTRA_KEY: {
@@
                 }
             },
         )
 
+        if updated:
+            log.info("crypto_invoice_status_updated", status=order.status.value)
+        else:
+            log.debug("crypto_invoice_status_unchanged", status=order.status.value)
+
         return CryptoSyncResult(
             updated=updated,
             status=payment.status,
             order_status=order.status,
             pay_link=pay_link,
*** End Patch
